
//=============================================================================
//	@file	Shot.cpp
//	@brief	弾ひとつ分の処理
//	@autor	相知 拓弥
//	@date	2018/12/12
//=============================================================================

//-----------------------------------------------------------------------------
//	@brief	インクルード
//-----------------------------------------------------------------------------
#include "Shot.h"
#include "Common.h"

//-----------------------------------------------------------------------------
//	@brief	静的定数
//-----------------------------------------------------------------------------
const float		Shot::HIT_RADIUS = 1.0f;							//	当たり判定用の半径
const VECTOR	Shot::ADJUSTMENT_RECT = VGet(1.0f, 1.0f, 1.0f);		//	当たり判定調整用

//-----------------------------------------------------------------------------
//	@brief	コンストラクタ
//-----------------------------------------------------------------------------
Shot::Shot(const int _modelHandle)
{
	//	モデルの複製する
	m_modelHandle = MV1DuplicateModel(_modelHandle);
	CommonDebug::Assert((m_modelHandle <= -1), " [ Shot.cpp ] : error : missing duplicat model.");

	m_pos = CommonConstant::ORIGIN;
	m_dir = CommonConstant::ORIGIN;
	m_speed = 0.0f;
	m_isOneTime = false;

	//	当たり判定用の構造体の初期化
	m_hitCircle.m_radius = HIT_RADIUS;
	m_hitCircle.m_centerPoint = CommonConstant::ORIGIN;

	m_hitRect.m_vertexTop = CommonConstant::ORIGIN;
	m_hitRect.m_vertexUnder = CommonConstant::ORIGIN;
}

//-----------------------------------------------------------------------------
//	@brief	デストラクタ
//-----------------------------------------------------------------------------
Shot::~Shot()
{
	//	最終的な解放処理
	_FinalRelease();
}

//-----------------------------------------------------------------------------
//	@brief	更新処理
//-----------------------------------------------------------------------------
void Shot::Update()
{
	//	移動処理
	_Move();

	//	当たり判定がずれるので、
	//	モデルにポジションを割り当てた後に、
	//	当たり判定用の座標の更新する
	_UpdateHitPoint();
}

//-----------------------------------------------------------------------------
//	@brief	描画処理
//-----------------------------------------------------------------------------
void Shot::Draw()
{
	//	モデルの描画
	MV1DrawModel(m_modelHandle);
}

//-----------------------------------------------------------------------------
//	@brief	移動処理
//-----------------------------------------------------------------------------
void Shot::_Move()
{
	//	移動
	VECTOR velocity = VScale(m_dir, m_speed);
	m_pos = VAdd(m_pos, velocity);

	//	モデルのポジションを割り当て
	MV1SetPosition(m_modelHandle, m_pos);
}

//-----------------------------------------------------------------------------
//	@brief	当たり判定用の点の更新
//-----------------------------------------------------------------------------
void Shot::_UpdateHitPoint()
{
	//	当たり判定用の中心座標の更新
	m_hitCircle.m_centerPoint = m_pos;

	m_hitRect.m_vertexTop = VSub(m_pos, ADJUSTMENT_RECT);
	m_hitRect.m_vertexUnder = VAdd(m_pos, ADJUSTMENT_RECT);
}

//-----------------------------------------------------------------------------
//	@brief	最終的な解放処理
//-----------------------------------------------------------------------------
void Shot::_FinalRelease()
{
	//	モデルのアンロード
	MV1DeleteModel(m_modelHandle);
}
